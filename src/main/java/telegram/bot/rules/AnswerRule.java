package telegram.bot.rules;

import com.pengrad.telegrambot.TelegramBot;
import com.pengrad.telegrambot.model.Message;
import com.pengrad.telegrambot.model.Update;
import com.pengrad.telegrambot.model.request.ParseMode;
import com.pengrad.telegrambot.request.SendMessage;
import helper.file.SharedObject;
import helper.string.StringHelper;
import telegram.bot.checker.EtsClarityChecker;
import telegram.bot.data.Common;
import telegram.bot.dto.ActionItemDto;

import java.text.SimpleDateFormat;
import java.util.*;
import java.util.function.Function;

import static telegram.bot.data.Common.ACTION_ITEMS2;
import static telegram.bot.data.Common.BIG_GENERAL_GROUP_IDS;
import static telegram.bot.data.Common.JOKE_ITEMS;

public class AnswerRule implements Rule {
    public static final String MATH_REG = "^(\\d+(\\.\\d+)?)( ?)+%s( ?)+(\\d+(\\.\\d+)?)$";
    public static final String MATH_PLUS = String.format(MATH_REG, "\\+");
    public static final String MATH_MINUS = String.format(MATH_REG, "\\-");
    public static final String MATH_MULTIPLY = String.format(MATH_REG, "\\*");
    public static final String MATH_DIVIDE = String.format(MATH_REG, "\\/");
    private final TelegramBot bot;
    private Map<String, MessageSupplier<String>> commonRegAnswers = new HashMap<>();
    private Map<String, Function<String, String>> commonAnswers = new HashMap<>();
    private Map<String, Function<String, String>> answers = new HashMap<>();
    private Map<String, Function<Message, String>> actions = new HashMap<>();
    private List<String> popularBotAnswers = Arrays.asList(
        "–ö–∞–∫–∏–µ –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏",
        "–ö—Ç–æ —Ç—É—Ç?",
        "Lorem ipsum",
        "–ü—Ä–æ–±–µ–ª—å—á–∏–∫–∏",
        "—á–∞–π, –∫–æ—Ñ–µ, –ø–æ—Ç–∞–Ω—Ü—É–µ–º?",
        "–í—Å–µ —Ç–∞–∫ –≥–æ–≤–æ—Ä—è—Ç, –∞ —Ç—ã –∫—É–ø–∏ –°–ª–æ–Ω–∞"
    );

    public AnswerRule(TelegramBot bot) {
        this.bot = bot;
        answers.put("–±–æ—Ç, –ø—Ä–∏–≤–µ—Ç", s -> "–û, –ü—Ä–∏–≤–µ—Ç!");
        commonRegAnswers.put("–±–æ—Ç,? –≥–æ–ª–æ—Å", s -> {
            List<String> strings = Arrays.asList("–ê—Ñ, –ê—Ñ!!", "–ú–∏–∞—É—É—É", "–ü—Ñ—Ñ—Ñ...", "–∫–≤–∞-–∫–≤–∞", "–∫—Ä—è-–∫—Ä—è", "–ö–≤–æ–æ–æ-–∫–æ-–∫–æ-–∫-–∫–æ", "–∏-–û-–∞-–ê–∞ –≠–∏ —ç–∏ —ç–∏–∏", "–∫–≤–∞-–∫–≤–∞", "–´–º –´–º", "–´–´-–´–´", "–ø—ã—Ö-–ø—ã—Ö", "—Ç—É-—Ç—É", "–ø–∏-–ø–∏-–ø–∏", "–ù—è-–Ω—è-–Ω—è");
            return strings.get((int) Math.round(Math.random() * (strings.size() - 1)));
        });
        commonRegAnswers.put("–±–æ—Ç,?.* –∞–Ω–µ–∫–¥–æ—Ç\\??", s -> {
            ArrayList<String> popularBotJokes = SharedObject.loadList(JOKE_ITEMS);
            Collections.shuffle(popularBotJokes);
            return popularBotJokes.get(0);
        });
        answers.put("–∫–∞–∫ –¥–µ–ª–∞?", s -> "–î–∞ –Ω–µ –ø–ª–æ—Ö–æ!\nc–∞–º –∫–∞–∫?");
        answers.put("—ç—Ç–æ –∫—Ç–æ?", s -> "–Ø —Ç–æ—Ç –∫—Ç–æ –º–æ–∂–µ—Ç —Ç–µ–±–µ –º–Ω–æ–≥–æ–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å. \n–ñ–º–∏ —Å—é–¥–∞ /help");
        answers.put("–∫—Ç–æ —ç—Ç–æ?", s -> "–Ø —Ç–æ—Ç –∫—Ç–æ –º–æ–∂–µ—Ç —Ç–µ–±–µ –º–Ω–æ–≥–æ–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å. \n–ñ–º–∏ —Å—é–¥–∞ /help");
        answers.put("–Ω–∞—Ä–∫–æ—Ç–∏–∫–∏", s -> "–ö–∞–∫–∏–µ –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏?");
        answers.put("–∫–∞–π—Ñ", s -> "–ö–∞–∫–∏–µ –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏?");
        answers.put("drugs", s -> "–ö–∞–∫–∏–µ –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏?");
        answers.put("–±–∞–≥–∏", s -> "—ç—Ç–æ –Ω–µ –±–∞–≥–∏, —ç—Ç–æ —Ñ–∏—á–∏");
        answers.put("–Ω—É–¥–∞–Ω—É–¥–∞", s -> "–ñ–µ–Ω—è, —ç—Ç–æ —Ç—ã?");
        answers.put("—Ä–æ—Ñ–ª", s -> "–†–æ–º–∞, —ç—Ç–æ —Ç—ã?");
        commonRegAnswers.put("–Ω—É –ø–æ—á–µ–º—É.*\\?", s -> "–ü–æ—Ç–æ–º—É");
        answers.put("c'est la ", s -> "–ñ–µ–Ω—è, —ç—Ç–æ —Ç—ã?");
        answers.put("—Ö–µ—Ö", s -> "–ñ–µ–Ω—è, —ç—Ç–æ —Ç—ã?");
        answers.put("—Ö—ç—Ö", s -> "–ñ–µ–Ω—è, —ç—Ç–æ —Ç—ã?");
        answers.put("—Ö—ç–≥", s -> "–ñ–µ–Ω—è, —ç—Ç–æ —Ç—ã?");
        answers.put("–≥–æ–¥–Ω—ã–π –∞–ø–¥–µ–π—Ç", s -> "–ñ–µ–Ω—è, —ç—Ç–æ —Ç—ã?");
        answers.put("–•–æ—Ä–æ—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞", s -> "–ñ–µ–Ω—è, —ç—Ç–æ —Ç—ã?");
        answers.put("Ctrl+C", s -> "–ù–µ —Å–∞–º–∞—è –ª—É—á—à–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞");
        answers.put("Ctrl+V", s -> "–ù–µ —Å–∞–º–∞—è –ª—É—á—à–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞");
        answers.put("ctrl+c, ctrl+v", s -> "–ù–µ —Å–∞–º–∞—è –ª—É—á—à–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞");
        answers.put("ctrl + c, ctrl + v", s -> "–ù–µ —Å–∞–º–∞—è –ª—É—á—à–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞");
        answers.put("ctrl + c", s -> "–ù–µ —Å–∞–º–∞—è –ª—É—á—à–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞");
        answers.put("ctrl + v", s -> "–ù–µ —Å–∞–º–∞—è –ª—É—á—à–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞");
        answers.put("ctrl+v", s -> "–ù–µ —Å–∞–º–∞—è –ª—É—á—à–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞");
        answers.put("ctrl+c", s -> "–ù–µ —Å–∞–º–∞—è –ª—É—á—à–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞");
        answers.put("–ø–ª–æ—Ö–æ", s -> "–±—ã–≤–∞–µ—Ç –∏ —Ö—É–∂–µ");
        commonRegAnswers.put("–∫—É–¥–∞ —Ö—É–∂–µ .*?", s -> "–µ—Å—Ç—å –∫—É–¥–∞...");
//        answers.put("–æ—á–µ–Ω—å –ø–ª–æ—Ö–æ", s -> "–±—ã–≤–∞–µ—Ç –∏ —Ö—É–∂–µ");
        answers.put("–¥–æ–º–æ–π", s -> "–Ω–µ —Ä–∞–Ω–æ–≤–∞—Ç–æ –ª–∏?");
        answers.put("–∫—É—à–∞—Ç—å", s -> "–ø–∞—Ä—É –º–∏–Ω—É—Ç, –º–Ω–µ —Ç—É—Ç –Ω–∞–¥–æ –¥–æ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å");
//        answers.put("–∫—É—Ä–∏—Ç—å", s -> "–∑–¥–æ—Ä–æ–≤—å—é –≤—Ä–µ–¥–∏—Ç—å");
//        answers.put("–ø–æ–∫—É—Ä–∏–º", s -> "–∑–¥–æ—Ä–æ–≤—å—é –ø–æ–≤—Ä–µ–¥–∏–º");
        answers.put("–∏–¥–µ–º", s -> "–∫—É–¥–∞?");
        answers.put("–º–∏–Ω—É—Ç–∫—É", s -> "–∞–≥–∞, –∫–∞–∫ –≤—Å–µ–≥–¥–∞");
        answers.put("—á–∞–π", s -> "–∫–æ—Ñ–µ");
        answers.put("–∫–æ—Ñ–µ", s -> "—á–∞–π");
        answers.put("–ø–∏–≤–æ", s -> "–≤–æ–¥–∫–∞");
        answers.put("–≤–æ–¥–∫–∞", s -> "–ø–∏–≤–æ");
        answers.put("–ø–µ–¥–∞–ª–∏—Ç—å", s -> "–Ω–µ –ª—É—á—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –≤ –¥–µ–≤–µ–ª–æ–ø–º–µ–Ω—Ç–µ");
//        answers.put("—Ä–µ–≤—å—é", s -> "–û, —Ä–µ–≤—å—é, –ù–∞–±–µ–≥–∞–π!");
        answers.put("–≤ —Å–º—ã—Å–ª–µ?", s -> "–í –ø—Ä—è–º–æ–º");
        answers.put("Lorem ipsum", s -> "https://ru.wikipedia.org/wiki/Lorem_ipsum");
        commonRegAnswers.put("–∫—É–ø–∏—Ç—å ([a-zA-Z–∞-—è–ê-–Ø ]?)+–ª–æ—Ç–µ—Ä–µ–π–∫—É\\?", s -> {
            switch (new Random().nextInt(5)) {
                case 0:
                    return "–î–∞";
                case 2:
                    return "–ù–µ—Ç";
                case 3:
                    return "–õ—É—á—à–µ –¥–≤–µ";
                case 4:
                    return "–ù–∏–≤–∫–æ–µ–º —Å–ª—É—á–∞–µ";
                case 5:
                    return "–í–æ–∑–º–æ–∂–Ω–æ";
            }
            return "–°–µ–≥–æ–¥–Ω—è –Ω–µ –≤–∞—à –¥–µ–Ω—å...";
        });
        commonAnswers.put("–ë–æ—Ç, –∫–∞–∫ —Ç–µ–±–µ ", s -> {
            String who = StringHelper.getRegString(s, "–ë–æ—Ç, –∫–∞–∫ —Ç–µ–±–µ (–º–æ—è?–∏? )?([–ê-–Ø–∞-—èa-zA-Z ]+)\\?", 2);
            String which = "–∫–ª–∞—Å—Å–Ω–∞—è –∏ –∫—Ä–∞—Å–∏–≤–∞—è";
            if (who.substring(who.length() - 1).matches("[–±–≤–≥–¥–∂–∑–π–∫–ª–º–Ω–ø—Ä—Å—Ç—Ñ—Ö—Ü—á—à—â]")) {
                which = "–∫–ª–∞—Å—Å–Ω—ã–π –∏ –∫—Ä–∞—Å–∏–≤—ã–π";
            }
            if (who.substring(who.length() - 1).matches("[—ã–´–∏–ò]")) {
                which = "–∫–ª–∞—Å—Å–Ω—ã–µ –∏ –∫—Ä–∞—Å–∏–≤—ã–µ";
            }
            int nextInt = new Random().nextInt(100);
            if (nextInt > 90) {
                return "–æ–¥–æ–±—Ä—è—é";
            } else if (nextInt < 10) {
                return "–Ω—É —Ç–∞–∫–æ–µ";
            }
            return "–ù—É –æ—á–µ–Ω—å " + which + " " + who;
        });
        commonRegAnswers.put("–¥–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É(–µ|—é)—Ç,? .*", s -> {
            String who = StringHelper.getRegString(s, "–¥–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É(–µ|—é)—Ç,? ?([–ê-–Ø–∞-—èa-zA-Z ]+)", 2);
            who = who.replaceAll("(\\W+)(–∞$)", "$1—É");
            who = who.replaceAll("(\\W+)(—è$)", "$1—é");
            who = who.replaceAll("(\\W+)(—å$)", "$1—è");
            who = who.replaceAll("(\\W+)([–±–≤–≥–¥–∂–∑–π–∫–ª–º–Ω–ø—Ä—Å—Ç—Ñ—Ö—Ü—á—à—â]$)", "$1$2–∞");
            return "–ë–æ–∂–µ, –•—Ä–∞–Ω–∏ " + who + "!!!";
        });
        commonRegAnswers.put("–±–æ—Ç, (—Å–∫–æ–ª—å–∫–æ|—Å–∫–æ–∫–∞) (\\W+) –≤ ([ a-zA-Z–ê-–Ø–∞-—è]+) ?\\??$", s -> {
            String regexp = "–±–æ—Ç, (—Å–∫–æ–ª—å–∫–æ|—Å–∫–æ–∫–∞) (\\W+) –≤ ([ a-zA-Z–ê-–Ø–∞-—è]+) ?\\??$";
            String regString1 = StringHelper.getRegString(s.toLowerCase(), regexp, 3);
            String regString2 = StringHelper.getRegString(s.toLowerCase(), regexp, 2);
            Long random1 = Math.round(Math.random() * 10);
            Long random2 = Math.round(Math.random() * 10);
            return String.format("–Ø –±—ã —Å–∫–∞–∑–∞–ª —á—Ç–æ –≤ %s %d %s –Ω–æ –º–æ–∂–µ—Ç –∏ %d %s", regString1, random1, regString2, random2, regString2);
        });
        commonAnswers.put("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", s -> "–î–µ–Ω—å –ø–æ—Ç–µ—Ä—è–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞");
        commonAnswers.put("–í—Ç–æ—Ä–Ω–∏–∫", s -> "–î–µ–Ω—å –≥–æ–≤–Ω–∞");
        commonAnswers.put("–°—Ä–µ–¥–∞", s -> "–ú–æ–ª—á–∞–Ω–∏–µ –†–æ–º—ã");
        commonAnswers.put("–ß–µ—Ç–≤–µ—Ä–≥", s -> "–î–µ–Ω—å —à–∞—Ä–∏–Ω–≥–∞ –∏–ª–∏ –Ω–µ—Å–±—ã–≤—à–µ–≥–æ—Å—è –ø–∏–≤–∞");
        commonAnswers.put("–ü—è—Ç–Ω–∏—Ü–∞", s -> "–ö–∞–∫–∏–µ –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏");
        commonRegAnswers.put("–±–æ—Ç, –¥–∞–π –ø—è—Ç—å.*", s -> "‚úãÔ∏è");
        commonRegAnswers.put("–±–æ—Ç, –¥–∞–π –æ–¥–∏–Ω.*", s -> "üñï");
        commonRegAnswers.put("–±–æ—Ç, –¥–∞–π –¥–≤–∞.*", s -> "üñïüñï");
        commonRegAnswers.put("–±–æ—Ç, –¥–∞–π —Ç—Ä–∏.*", s -> "üñïüñïüñï");
        commonRegAnswers.put("–±–æ—Ç, –¥–∞–π —á–µ—Ç—ã—Ä–∏.*", s -> "üñïüñïüñïüñï");
        commonRegAnswers.put("–±–æ—Ç, –¥–∞–π —à–µ—Å—Ç—å.*", s -> "üñïüñïüñïüñïüñïüñï");
        commonRegAnswers.put("–±–æ—Ç, –¥–∞–π —Å–µ–º—å.*", s -> "üñïüñïüñïüñïüñïüñïüñï");
        commonRegAnswers.put("–±–æ—Ç, –¥–∞–π –≤–æ—Å–µ–º—å.*", s -> "üñïüñïüñïüñïüñïüñïüñïüñï");
        commonRegAnswers.put("–±–æ—Ç, –¥–∞–π –¥–µ–≤—è—Ç—å.*", s -> "üñïüñïüñïüñïüñïüñïüñïüñïüñï");
        commonRegAnswers.put("–±–æ—Ç, –¥–∞–π –¥–µ—Å—è—Ç—å.*", s -> "‚úã‚úãÔ∏è");
        commonRegAnswers.put("–±–æ—Ç, (—Å–∫–æ–ª—å–∫–æ|—Å–∫–æ–∫–∞) —É (\\W+) ([a-zA-Z–ê-–Ø–∞-—è]+) ?\\??$", s -> {
            String regexp = "–±–æ—Ç, (—Å–∫–æ–ª—å–∫–æ|—Å–∫–æ–∫–∞) —É (\\W+) ([a-zA-Z–ê-–Ø–∞-—è]+) ?\\??$";
            String regString1 = StringHelper.getRegString(s, regexp, 2);
            String regString2 = StringHelper.getRegString(s.toLowerCase(), regexp, 3);
            Long random1 = Math.round(Math.random() * 10);
            Long random2 = Math.round(Math.random() * 10);
            return String.format("–Ø –±—ã —Å–∫–∞–∑–∞–ª —á—Ç–æ —É %s %d %s –Ω–æ –º–æ–∂–µ—Ç –∏ %d %s", regString1, random1, regString2, random2, regString2);
        });
//        commonAnswers.put("* ETS *", s -> "–í—Å–µ –ø—Ä–æ—Å—Ç–æ, –∑–∞—Ö–æ–¥–∏–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º\nhttps://timeserver.i.sigmaukraine.com/timereports.ets");
//        commonRegAnswers.put("\\*+ ?ets ?\\*+", s -> "–í—Å–µ –ø—Ä–æ—Å—Ç–æ, –∑–∞—Ö–æ–¥–∏–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º\nhttps://timeserver.i.sigmaukraine.com/timereports.ets");
        commonRegAnswers.put("\\*+ ?ets ?\\*+", MessageSupplier.getAs(ParseMode.HTML, s -> EtsClarityChecker.getMessage(bot)));
        commonRegAnswers.put("\\*+ ?clarity ?\\*+", s -> "–í—Å–µ –ø—Ä–æ—Å—Ç–æ, –∑–∞—Ö–æ–¥–∏–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º\nhttps://clarity.gtk.gtech.com:8043/niku/nu#action:npt.overview");
        commonAnswers.put("—Ö—É–π", s -> "–ü–æ–ø—Ä–æ—à—É –Ω–µ –º–∞—Ç—é–∫–∞—Ç—å—Å—è.");
        commonAnswers.put("–ø–∏–∑–¥", s -> "–ü–æ–ø—Ä–æ—à—É –Ω–µ –º–∞—Ç—é–∫–∞—Ç—å—Å—è.");
        commonAnswers.put("–µ–±–∞—Ç", s -> "–ü–æ–ø—Ä–æ—à—É –Ω–µ –º–∞—Ç—é–∫–∞—Ç—å—Å—è.");
        commonAnswers.put("–µ–±–∞–Ω", s -> "–ü–æ–ø—Ä–æ—à—É –Ω–µ –º–∞—Ç—é–∫–∞—Ç—å—Å—è.");
        commonAnswers.put("–±–ª—è", s -> "–ü–æ–ø—Ä–æ—à—É –Ω–µ –º–∞—Ç—é–∫–∞—Ç—å—Å—è.");
        commonAnswers.put("—Å–≤–æ–ª–æ—á—å", s -> "–ü–æ–ø—Ä–æ—à—É –Ω–µ –≤—ã—Ä–∞–∂–∞—Ç—å—Å—è.");
        commonAnswers.put("–ø–æ—Ü", s -> "–ü–æ–ø—Ä–æ—à—É –Ω–µ –≤—ã—Ä–∞–∂–∞—Ç—å—Å—è.");
        commonAnswers.put("–ø—Ä–∏–¥—É—Ä", s -> "–ü–æ–ø—Ä–æ—à—É –Ω–µ –≤—ã—Ä–∞–∂–∞—Ç—å—Å—è.");
        commonAnswers.put("–¥—É—Ä–∞", s -> "–ü–æ–ø—Ä–æ—à—É –Ω–µ –≤—ã—Ä–∞–∂–∞—Ç—å—Å—è.");
//        commonAnswers.put("—Ñ–∞–∫ ", s -> "–ü–æ–ø—Ä–æ—à—É –Ω–µ –≤—ã—Ä–∞–∂–∞—Ç—å—Å—è.");
//        commonAnswers.put(" —Ñ–∞–∫", s -> "–ü–æ–ø—Ä–æ—à—É –Ω–µ –≤—ã—Ä–∞–∂–∞—Ç—å—Å—è.");
        commonAnswers.put("–≥–∞–≤–Ω", s -> "–ü–æ–ø—Ä–æ—à—É –Ω–µ –≤—ã—Ä–∞–∂–∞—Ç—å—Å—è.");
        commonAnswers.put("–≥–æ–≤–Ω", s -> "–ü–æ–ø—Ä–æ—à—É –Ω–µ –≤—ã—Ä–∞–∂–∞—Ç—å—Å—è.");
        commonAnswers.put("—Ç—É–ø–∞—è", s -> "–ü–æ–ø—Ä–æ—à—É –Ω–µ –≤—ã—Ä–∞–∂–∞—Ç—å—Å—è.");
        commonAnswers.put("—Ç—É–ø–æ–π", s -> "–ü–æ–ø—Ä–æ—à—É –Ω–µ –≤—ã—Ä–∞–∂–∞—Ç—å—Å—è.");
        commonRegAnswers.put("^[a-z–∞-—è]{21,}$", s -> "–ù—É –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ");
        commonRegAnswers.put("(.*(–§|—Ñ)–∞+–∫,? .*)|(^(–§|—Ñ)–∞+–∫!{0,})", s -> "–ü–æ–ø—Ä–æ—à—É –Ω–µ –≤—ã—Ä–∞–∂–∞—Ç—å—Å—è.");
        commonRegAnswers.put("^(M|m)erde$", s -> "Pue");
        commonRegAnswers.put(MATH_PLUS, s -> {
            String regString1 = StringHelper.getRegString(s, MATH_PLUS, 1);
            String regString2 = StringHelper.getRegString(s, MATH_PLUS, 5);
            return Float.parseFloat(regString1) + Float.parseFloat(regString2) + "";
        });
        commonRegAnswers.put(MATH_MULTIPLY, s -> {
            String regString1 = StringHelper.getRegString(s, MATH_MULTIPLY, 1);
            String regString2 = StringHelper.getRegString(s, MATH_MULTIPLY, 5);
            return Float.parseFloat(regString1) * Float.parseFloat(regString2) + "";
        });
        commonRegAnswers.put(MATH_MINUS, s -> {
            String regString1 = StringHelper.getRegString(s, MATH_MINUS, 1);
            String regString2 = StringHelper.getRegString(s, MATH_MINUS, 5);
            return Float.parseFloat(regString1) - Float.parseFloat(regString2) + "";
        });
        commonRegAnswers.put(MATH_DIVIDE, s -> {
            String regString1 = StringHelper.getRegString(s, MATH_DIVIDE, 1);
            String regString2 = StringHelper.getRegString(s, MATH_DIVIDE, 5);
            float secondParam = Float.parseFloat(regString2);
            if (secondParam == 0) {
                return "NaN";
            }
            return Float.parseFloat(regString1) / secondParam + "";
        });
        commonAnswers.put("–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å?", s -> String.format("–°–µ–π—á–∞—Å –æ–∫–æ–ª–æ: %s", new SimpleDateFormat("HH:mm:ss").format(Calendar.getInstance().getTime())));
        commonAnswers.put("—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º—è?", s -> String.format("–°–µ–π—á–∞—Å –æ–∫–æ–ª–æ: %s", new SimpleDateFormat("HH:mm:ss").format(Calendar.getInstance().getTime())));
        commonAnswers.put("—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏?", s -> String.format("–°–µ–π—á–∞—Å –æ–∫–æ–ª–æ: %s", new SimpleDateFormat("HH:mm:ss").format(Calendar.getInstance().getTime())));
        commonAnswers.put("—á—Ç–æ —Ç–∞–∫–æ–µ ", s -> {
            String query = StringHelper.getRegString(s, "—á—Ç–æ —Ç–∞–∫–æ–µ ([a-zA-Z–∞-—è–ê-–Ø ]+)\\??", 1);
            return Common.GOOGLE.getFirstResult(query);
        });
        commonAnswers.put("–∫—Ç–æ —Ç–∞–∫–æ–π ", s -> {
            String query = StringHelper.getRegString(s, "–∫—Ç–æ —Ç–∞–∫–æ–π ([a-zA-Z–∞-—è–ê-–Ø ]+)\\??", 1);
            return Common.GOOGLE.getFirstResult(query);
        });

        actions.put("#AI", message -> {
            String text = message.text() == null ? "" : message.text();
            HashMap<Integer, ActionItemDto> actionItems2 = SharedObject.loadMap(ACTION_ITEMS2, new HashMap<Integer, ActionItemDto>());
            StringBuilder result = new StringBuilder();
            Integer i = 0;
            for (String actionItem : text.split("#(AI|ai|Ai|aI) ")) {
                if (actionItem.isEmpty()) {
                    continue;
                }
                String date = new SimpleDateFormat("dd.MM/HH:mm:ss").format(Calendar.getInstance().getTime());
                int key = Math.abs((date + i).hashCode());
                actionItems2.put(key, new ActionItemDto(date, actionItem, message.chat().id()));
                if (i > 0) {
                    result.append("\n");
                }
                result.append("–°–æ—Ö—Ä–∞–Ω–∏–ª ActionItem\n")
                    .append("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–º–∞–Ω–¥—É: ")
                    .append("/resolveAI__").append(key);
                i++;
            }
            SharedObject.save(ACTION_ITEMS2, actionItems2);
            return result.toString();
        });
        Function<Message, String> jokesSaver = message -> {
            String text = message.text() == null ? "" : message.text();
            ArrayList<String> popularBotJokes = SharedObject.loadList(JOKE_ITEMS);
            for (String joke : text.split("#(–∞–Ω–µ–∫–¥–æ—Ç|joke) ")) {
                if (joke.isEmpty()) {
                    continue;
                }
                popularBotJokes.add(joke);
            }
            SharedObject.save(JOKE_ITEMS, popularBotJokes);
            return "Jokes saved";
        };
        actions.put("#–∞–Ω–µ–∫–¥–æ—Ç", jokesSaver);
        actions.put("#joke", jokesSaver);
        actions.put("#clearJokes",  message -> {
            SharedObject.save(JOKE_ITEMS, new ArrayList<String>());
            return "jokes cleared";
        });
    }

    @Override
    public void run(Update update) {
        Message message = update.message() == null ? update.editedMessage() : update.message();
        String text = message.text() == null ? "" : message.text();
        if (message.from().isBot()) {
            return;
        }
        if (message.replyToMessage() != null) {
            if (message.replyToMessage().from().isBot()) {
                Collections.shuffle(popularBotAnswers);
                String answer = popularBotAnswers.get(0);
                SendMessage request = new SendMessage(message.chat().id(), answer)
                    .parseMode(ParseMode.HTML)
                    .disableWebPagePreview(true)
                    .disableNotification(true)
                    .replyToMessageId(message.messageId());
                bot.execute(request);
            }
        }
        for (Map.Entry<String, Function<Message, String>> entry : actions.entrySet()) {
            if (text.toLowerCase().contains(entry.getKey().toLowerCase())) {
                SendMessage request = new SendMessage(message.chat().id(), entry.getValue().apply(message))
                    .parseMode(ParseMode.HTML)
                    .disableWebPagePreview(true)
                    .disableNotification(true)
                    .replyToMessageId(message.messageId());
                bot.execute(request);
            }
        }
        if (!BIG_GENERAL_GROUP_IDS.contains(message.chat().id())) {
            for (Map.Entry<String, Function<String, String>> entry : answers.entrySet()) {
                if (text.toLowerCase().contains(entry.getKey().toLowerCase())) {
                    SendMessage request = new SendMessage(message.chat().id(), entry.getValue().apply(text))
                        .parseMode(ParseMode.Markdown)
                        .disableWebPagePreview(false)
                        .disableNotification(true)
                        .replyToMessageId(message.messageId());
                    bot.execute(request);
                }
            }
        }
        for (Map.Entry<String, Function<String, String>> entry : commonAnswers.entrySet()) {
            if (text.toLowerCase().contains(entry.getKey().toLowerCase())) {
                SendMessage request = new SendMessage(message.chat().id(), entry.getValue().apply(text))
                    .parseMode(ParseMode.Markdown)
                    .disableWebPagePreview(false)
                    .disableNotification(true)
                    .replyToMessageId(message.messageId());
                bot.execute(request);
                return;
            }
        }
        for (Map.Entry<String, MessageSupplier<String>> entry : commonRegAnswers.entrySet()) {
            if (text.toLowerCase().matches(entry.getKey())) {
                SendMessage request = new SendMessage(message.chat().id(), entry.getValue().apply(text))
                    .parseMode(entry.getValue().getParseMode())
                    .disableWebPagePreview(false)
                    .disableNotification(true)
                    .replyToMessageId(message.messageId());
                bot.execute(request);
                return;
            }
        }
    }

    private interface MessageSupplier<T> extends Function<T, String> {
        default ParseMode getParseMode() {
            return ParseMode.Markdown;
        }

        static <T> MessageSupplier getAs(ParseMode parseMode, MessageSupplier<T> messageSupplier) {
            return new MessageSupplier<T>() {
                @Override
                public String apply(T o) {
                    return messageSupplier.apply(o);
                }

                @Override
                public ParseMode getParseMode() {
                    return parseMode;
                }
            };
        }
    }
}
